library(MCMCvis)
library(boot)
library(tidyverse)
library(mcmcplots)
library(ggplot2)
library(ggdist)
library(dplyr)
library(tidyr)
library(viridis)
library(patchwork)
library(nimble)
# Import the CSV file
mm.data <- read.csv("intercal_ALL_metadata_12.30.24-noCs_NEW.csv")
setwd("/Users/nastassiapatin/GitHub/eDNA_patch/TwoPrimerModel")
# Import the CSV file
mm.data <- read.csv("intercal_ALL_metadata_12.30.24-noCs_NEW.csv")
# remove the underway sample data from this analysis
mm.data <- mm.data[mm.data$Collection_method != "UW", ]
# remove the passive filter sample data from this analysis
mm.data <- mm.data[mm.data$Collection_method != "PF", ]
# because I've removed some of the unique biosample reference numbers with the above
# methods removal, I need to renumber the unique biosamples so that they are consecutive
# and start with 1. I do this using the factor trick.
mm.data$uniqiue_biorep_numeric<-as.numeric(as.factor(mm.data$uniqiue_biorep_numeric))
View(mm.data)
# Import the CSV file
mm.data <- read.csv("intercal_ALL_metadata_12.30.24-noCs_NEW.csv")
# remove the underway sample data from this analysis
mm.data <- mm.data[mm.data$Collection_method != "UW", ]
# remove the passive filter sample data from this analysis
mm.data <- mm.data[mm.data$Collection_method != "PF", ]
# because I've removed some of the unique biosample reference numbers with the above
# methods removal, I need to renumber the unique biosamples so that they are consecutive
# and start with 1. I do this using the factor trick.
mm.data$unique_biorep_numeric<-as.numeric(as.factor(mm.data$unique_biorep_numeric))
# pull unique info for each bio sample (can add to these for enviro covariates)
biosamp_dat <- mm.data %>%
group_by(unique_biorep_numeric) %>%
slice(1) %>%
ungroup()
# Import the CSV file
mm.data <- read.csv("intercal_ALL_metadata_12.30.24-noCs_NEW.csv")
# remove the underway sample data from this analysis
mm.data <- mm.data[mm.data$Collection_method != "UW", ]
# remove the passive filter sample data from this analysis
mm.data <- mm.data[mm.data$Collection_method != "PF", ]
# because I've removed some of the unique biosample reference numbers with the above
# methods removal, I need to renumber the unique biosamples so that they are consecutive
# and start with 1. I do this using the factor trick.
mm.data$unique_biorep_numeric <- as.numeric(as.factor(mm.data$unique_biorep_numeric))
# pull unique info for each bio sample (can add to these for enviro covariates)
biosamp_dat <- mm.data %>%
group_by(unique_biorep_numeric) %>%
slice(1) %>%
ungroup()
# make data, index vectors and constants for nimble work
biosamp_station_index<- biosamp_dat$site.numeric
biosamp_method_index<- biosamp_dat$Collection_method_numeric
Y_biosamp_index<- mm.data$unique_biorep_numeric
biosamp_Volume_filt_mL <- as.numeric(biosamp_dat$Volume_filt_mL) - mean(as.numeric(biosamp_dat$Volume_filt_mL)) #centered water volumes
biosamp_depth_Depth_m <- as.numeric(biosamp_dat$Depth_m) - mean(as.numeric(biosamp_dat$Depth_m)) #centered sample depths
Y_method_index<- mm.data$Collection_method_numeric
Y_station_index<-mm.data$site.numeric
# Import the CSV file
mm.data <- read.csv("intercal_ALL_metadata_12.30.24-noCs_NEW.csv")
# remove the underway sample data from this analysis
mm.data <- mm.data[mm.data$Collection_method != "UW", ]
# remove the passive filter sample data from this analysis
mm.data <- mm.data[mm.data$Collection_method != "PF", ]
# because I've removed some of the unique biosample reference numbers with the above
# methods removal, I need to renumber the unique biosamples so that they are consecutive
# and start with 1. I do this using the factor trick.
mm.data$unique_biorep_numeric <- as.numeric(as.factor(mm.data$unique_biorep_numeric))
# pull unique info for each bio sample (can add to these for enviro covariates)
biosamp_dat <- mm.data %>%
group_by(unique_biorep_numeric) %>%
slice(1) %>%
ungroup()
# make data, index vectors and constants for nimble work
biosamp_station_index<- biosamp_dat$site.numeric
biosamp_method_index<- biosamp_dat$Collection_method_numeric
Y_biosamp_index<- mm.data$unique_biorep_numeric
biosamp_Volume_filt_mL <- as.numeric(biosamp_dat$Volume_filt_mL) - mean(as.numeric(biosamp_dat$Volume_filt_mL)) #centered water volumes
biosamp_depth_Depth_m <- as.numeric(biosamp_dat$Depth_m) - mean(as.numeric(biosamp_dat$Depth_m)) #centered sample depths
Y_method_index<- mm.data$Collection_method_numeric
Y_station_index<-mm.data$site.numeric
Y_primer_index<-mm.data$Primer_numeric
N <- dim(mm.data)[1]
n_sites <- length(unique(mm.data$site.numeric))
n_biosamples <- length(unique(mm.data$unique_biorep_numeric))
n_methods <- length(unique(mm.data$Collection_method_numeric ))
n_primers <- length(unique(mm.data$Primer_numeric))
Y <- mm.data$delphinus_all #HEY YOU! THIS IS DELPHINIDAE ONLY. IF YOU WANT ALL MMS, CHANGE.
edna_code_vol_depth_meth_randCap <- nimbleCode({
cap_prob_hat ~ dnorm(0,1.7)
cap_prob_SD~ dexp(1)
for (i in 1:n_sites) {
# Site-level occurrence probability
site_occurrence[i] ~ dbern(prob_occurrence)
cap_prob_logit[i] ~ dnorm(cap_prob_hat,cap_prob_SD)
}
for (i in 1:n_biosamples) {
logit(prob_capture[i]) <- cap_prob_logit[biosamp_station_index[i]] +   # categorical differences in capture method # removed [biosamp_method_index[i]]
b_depth * biosamp_depth_Depth_m[i] +    # continuous effect of depth
b_vol * biosamp_Volume_filt_mL[i]  +    # continuous effect of volume
b_meth[biosamp_method_index[i]]
# biosample-level occurrence probability
bio_capture[i] ~ dbern(site_occurrence[biosamp_station_index[i]] *
prob_capture[i])
# `biosamp_station_index` -- index vector that specifies which site each
# biosample belongs to
# `biosamp_method_index` -- index vector that specifies which method each
# biosample belongs to
}
# Likelihood of detecting in each lab sample (tech replicate)
for (i in 1:N) {
Y[i] ~ dbern(bio_capture[Y_biosamp_index[i]] * prob_detection[Y_primer_index[i]])
# `Y_biosamp_index[i]` -- index vector that specifies which biological sample each
# observation belongs to
}
# Priors for the parameters
prob_occurrence ~ dbeta(1, 1)
b_depth ~ dnorm(0, 1)
b_vol ~ dnorm(0, 1)
prob_detection[1] ~ dbeta(1, 1) #detection prob for dloop_original
prob_detection[2] ~ dbeta(1, 1) #detection prob for MiFish
b_meth[1] <- 0
b_meth[2] ~dnorm(0,1.7)
b_meth[3] ~dnorm(0,1.7)
})
# Define the constants, data, and initial values
constants <- list(
n_sites = n_sites,
n_biosamples = n_biosamples,
n_methods = n_methods,
n_primers = n_primers,
N = N,
biosamp_station_index = biosamp_station_index,
biosamp_method_index = biosamp_method_index,
Y_biosamp_index = Y_biosamp_index,
Y_primer_index = Y_primer_index,
Y_method_index = Y_method_index
)
# Define the data
data <- list(
Y = Y, # detections by sample
biosamp_Volume_filt_mL = biosamp_Volume_filt_mL, #centered water volumes
biosamp_depth_Depth_m = biosamp_depth_Depth_m #centered sample depths
)
View(data)
data
inits <- list(
prob_occurrence = 0.5,  # Initial value for probability of site occurrence
site_occurrence = rep(1, n_sites),  # Initial values for site occurrence, all set to 1 (can be set randomly between 0 and 1)
#bio_capture = rep(1, n_biosamples),  # Initial values for biosample capture
# Initial values for method-specific parameters
#prob_detection = rep(0.5, n_methods),  # Initial values for detection probability
# Initial values for coefficients
b_depth = 0,  # Initial value for depth coefficient
b_vol = 0     # Initial value for volume coefficient
)
# Run NIMBLE model
edna_code_vol_depth_meth_randCap.run <- nimbleMCMC(code = edna_code_vol_depth_meth_randCap,
constants = constants,
data = data,
inits = inits,
niter = 200000,
nburnin = 10000,
thin = 100,
nchains = 3,
summary=TRUE,
samplesAsCodaMCMC = TRUE,
WAIC = TRUE)
# Gelman-Rubin diagnostic
MCMCsummary(edna_code_vol_depth_meth_randCap.run$samples)
# Visualize MCMC chains
mcmcplot(edna_code_vol_depth_meth_randCap.run$samples)
# --- Posterior analysis and plotting ---
attach.nimble(edna_code_vol_depth_meth_randCap.run$samples)
library(nimble)
# --- Posterior analysis and plotting ---
attach.nimble(edna_code_vol_depth_meth_randCap.run$samples)
?attach.nimble
??attach.nimble
